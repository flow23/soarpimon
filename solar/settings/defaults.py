"""
Django settings for solar project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(os.path.join(os.path.join(BASE_DIR, os.pardir), os.pardir))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'c*r)f^%y2yd9%u$oi(p3rsbdu=iv0at_9zj*6j@_m38&@))uwk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap3',
    'abcdef',
    'graphs',
    'polls',
    'django_crontab',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

ROOT_URLCONF = 'solar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'graphs.globalContextProcessor.graphCategories',
            ],
        },
    },
]

WSGI_APPLICATION = 'solar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

#USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/webapp/solar_django/solar/static'

# Media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'solar/media')
MEDIA_URL = '/media/'

# Settings for django-bootstrap3
BOOTSTRAP3 = {
    'set_required': False,
    'error_css_class': 'bootstrap3-error',
    'required_css_class': 'bootstrap3-required',
    'javascript_in_head': True,
}

# Settings for django-crontabs
CRONJOBS = [
    ('*/1 * * * *', 'solar.cron.SensorPolling', [], {}, '>> /webapp/solar_django/solar/solar/cron.log'),
    ('*/5 * * * *', 'graphs.cron.sendDailyStatus', [], {}, '>> /webapp/solar_django/solar/solar/cron.log'),
    #('*/1 * * * *', 'solar.cron.OLEDStatusDisplay', [], {}, '>> /webapp/solar_django/solar/solar/cron.log')
]
CRONTAB_LOCK_JOBS = False
CRONTAB_COMMAND_PREFIX = 'sudo'
#CRONJOBS = [
#    ('*/5 * * * *', 'myproject.myapp.cron.other_scheduled_job', ['arg1', 'arg2'], {'verbose': 0}),
#    ('0   4 * * *', 'django.core.management.call_command', ['clearsessions']),
#]

# Logging
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
#         },
#     },
#     'handlers': {
#         # 'sentry': {
#         #     'level': 'WARNING',
#         #     'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
#         # },
#         'console': {
#             'level': 'WARNING',
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose'
#         }
#     },
#     # 'loggers': {
#     #     'django': {
#     #         'handlers': ['sentry'],
#     #         'level': 'WARNING',
#     #         'propagate': True,
#     #     },
#         # 'raven': {
#         #     'level': 'WARNING',
#         #     'handlers': ['sentry'],
#         #     'propagate': False,
#         # },
#         # 'sentry.errors': {
#         #     'level': 'WARNING',
#         #     'handlers': ['sentry'],
#         #     'propagate': False,
#         # },
#     # }
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
      'verbose': {
          'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
      },
      'flow': {
          'format': '%(levelname)s %(asctime)s %(module)s.%(funcName)s()[%(lineno)d] %(message)s'
      },
      'simple': {
          'format': '%(levelname)s %(message)s'
      },
  },
    'handlers': {
        'file_debug': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/webapp/solar_django/logs/django_debug.log',
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 10,
            'formatter':'flow',
        },
        'file_cronjob_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/webapp/solar_django/logs/cronjob_debug.log',
            #'maxBytes': 1024*1024*5, # 5 MB
            #'backupCount': 5,
            'formatter':'flow',
        },
        'file_info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/webapp/solar_django/logs/django_info.log',
            #'maxBytes': 1024*1024*5, # 5 MB
            #'backupCount': 5,
            'formatter':'flow',
        },
        'mail_admins': {
            'level': 'ERROR',
            #'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
    },
    'loggers': {
        '': {
            'handlers': ['file_info'],
            'level': 'INFO',
            'propagate': True,
        },
        'cronjob': {
            'handlers': ['file_cronjob_debug'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['mail_admins',],
            'propagate': True,
            'level': 'DEBUG',
        },
        'django.request': {
            'handlers': ['file_debug'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Mail settings
EMAIL_BACKEND = ''
EMAIL_USE_TLS = True
EMAIL_HOST = ''
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
DEFAULT_FROM_EMAIL = ''
DEFAULT_TO_EMAIL = ''
SERVER_EMAIL = ''

ADMINS = (
    ('Florian', 'florian.wallburg@web.de')
)
